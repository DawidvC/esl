
import out_fix;
const fdo: out.OutFD = sys.fdout;
const err: out.OutFD = sys.fderr;

proc PBAM(s: @[]_byte, x: _ufix(16,16))
{
    err.str(s);
    err.ufix16_16(x,6);
    err.chr('[');
    err.hex16(_uint16(x));
    err.chr(']');
}

proc PQ14(s: @[]_byte, x: _sfix(16,14))
{
    err.str(s);
    err.sfix16_14(x,6);
    err.chr('[');
    err.hex16(_uint16(x));
    err.chr(']');
}

import cordic_fix16;
alias trig.Q16_14 as Q16_14;
alias trig.BAM16 as BAM;

proc testsincos(x: _uint16)
{
    var sin, cos: Q16_14;
    var phi: BAM;

    phi = BAM(x);
    sin,cos = trig.sincos(phi);
    fdo.ufix16_16(phi,6); fdo.chr('['); fdo.hex16(_uint16(phi)); fdo.chr(']');
    fdo.chr(' ');
    fdo.str(" sin=");
    fdo.sfix16_14(sin,6); fdo.chr('['); fdo.hex16(_uint16(sin)); fdo.chr(']');
    fdo.str(" cos=");
    fdo.sfix16_14(cos,6); fdo.chr('['); fdo.hex16(_uint16(cos)); fdo.chr(']');
    fdo.nl();
}

proc main(): _int
{

    fdo.str("Test sin/cos\n");
    testsincos(0);	// 0 degrees
    testsincos(0x1555);	// 30 degrees
    testsincos(0x2000);	// 45 degrees
    testsincos(0x2AAB);	// 60 degrees
    testsincos(0x4000);	// 90 degrees
    testsincos(0x5555);	// 120 degrees
    testsincos(0x6000);	// 135 degrees
    testsincos(0x6AAB);	// 150 degrees
    testsincos(0x8000);	// 180 degrees
    testsincos(0x9555);	// 210 degrees
    testsincos(0xA000);	// 225 degrees
    testsincos(0xAAAB);	// 240 degrees
    testsincos(0xC000);	// 270 degrees
    testsincos(0xD555);	// 300 degrees
    testsincos(0xE000);	// 315 degrees
    testsincos(0xEAAB);	// 330 degrees

    return 0;
}

